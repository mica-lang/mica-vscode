{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Mica",
	"patterns": [
		{ "include": "#comments" },
		{ "include": "#keywords" },
		{ "include": "#variables" },
		{ "include": "#numbers" },
		{ "include": "#strings" }
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.mica",
					"match": "#.*"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "constant.language.mica",
					"match": "\\b(nil|true|false)\\b"
				},
				{
					"name": "keyword.control.mica",
					"match": "\\b(do|if|elif|else|while|end|break|return|and|or)\\b"
				},
				{
					"name": "keyword.other.impl.mica",
					"match": "\\b(impl|as)\\b"
				},
				{
					"name": "storage.type.mica",
					"match": "\\b(func|struct|trait)\\b"
				},
				{
					"name": "storage.modifier.mica",
					"match": "\\b(static|constructor)\\b"
				},
				{
					"name": "variable.language.mica",
					"match": "\\bself\\b"
				},
				{
					"match": "(\\.)\\s*([\\p{Alpha}_][\\p{Alpha}\\p{Nd}_]*)",
					"captures": {
						"1": { "name": "keyword.operator" },
						"2": { "name": "entity.name.function.mica" }
					}
				},
				{
					"name": "keyword.operator",
					"match": "[\\+\\-\\*\\/\\=\\!\\<\\>\\.]"
				},
				{
					"name": "punctuation.paren.open.mica",
					"match": "\\("
				},
				{
					"name": "punctuation.paren.close.mica",
					"match": "\\)"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "entity.name.type.mica",
					"match": "\\b(\\p{Uppercase}[\\p{Alpha}\\p{Nd}_]*)\\b"
				},
				{
					"match": "\\b([\\p{Alpha}_][\\p{Alpha}\\p{Nd}_]*)\\b\\s*\\(",
					"captures": {
						"1": { "name": "entity.name.function.mica" }
					}
				},
				{
					"match": "(@)\\s*([\\p{Alpha}_][\\p{Alpha}\\p{Nd}_]*)\\b",
					"captures": {
						"1": { "name": "punctuation.definition.variable.mica" },
						"2": { "name": "variable.other.mica" }
					}
				},
				{
					"name": "variable.other.mica",
					"match": "\\b([\\p{Alpha}_][\\p{Alpha}\\p{Nd}_]*)\\b"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.mica",
					"match": "[0-9_]+(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?"
				},
				{
					"name": "constant.numeric.radix.mica",
					"match": "(\\\\)[0-9_]+(:)[0-9a-zA-Z_]+",
					"captures": {
						"1": { "name": "keyword.other.backslash.mica" },
						"2": { "name": "punctuation.separator.radix.mica" }
					}
				},
				{
					"name": "constant.numeric.binary.mica",
					"match": "(\\\\[bB])[01_]+",
					"captures": {
						"1": { "name": "keyword.other.unit.binary.mica" }
					}
				},
				{
					"name": "constant.numeric.octal.mica",
					"match": "(\\\\o)[0-7_]+",
					"captures": {
						"1": { "name": "keyword.other.unit.octal.mica" }
					}
				},
				{
					"name": "constant.numeric.octal.mica",
					"match": "(\\\\[xX])[0-9a-fA-F_]+",
					"captures": {
						"1": { "name": "keyword.other.unit.hexadecimal.mica" }
					}
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.mica",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.mica",
							"match": "\\\\([\"'\\\\nrt]|u\\{([0-9a-fA-F_]+)\\})",
							"captures": {
								"2": { "name": "constant.numeric.codepoint.mica" }
							}
						}
					]
				},
				{
					"name": "string.quoted.double.raw.mica",
					"begin": "(\\\\r)\"",
					"beginCaptures": {
						"1": { "name": "keyword.other.string.raw.mica" }
					},
					"end": "\""
				},
				{
					"name": "string.other.multiline.mica",
					"begin": "\\\\\\\\",
					"end": "\n"
				},
				{
					"name": "string.quoted.single.char.mica",
					"match": "(\\\\u)'.'",
					"captures": {
						"1": { "name": "keyword.other.character.unicode.mica" }
					}
				}
			]
		}
	},
	"scopeName": "source.mica"
}
